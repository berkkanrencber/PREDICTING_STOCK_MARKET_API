// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PREDICTING_STOCK_MARKET_API.Models;

#nullable disable

namespace PREDICTING_STOCK_MARKET_API.Migrations
{
    [DbContext(typeof(StocksContext))]
    [Migration("20240503145018_AllSentimentDataTables")]
    partial class AllSentimentDataTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PREDICTING_STOCK_MARKET_API.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PREDICTING_STOCK_MARKET_API.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PREDICTING_STOCK_MARKET_API.Models.Sentiment1Month", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("StockGeneralSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockGeneralSentiment");

                    b.Property<string>("StockLikeSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockLikeSentiment");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockName");

                    b.Property<string>("StockReplySentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockReplySentiment");

                    b.Property<string>("StockResultSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockResultSentiment");

                    b.Property<string>("StockRetweetSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockRetweetSentiment");

                    b.HasKey("StockId")
                        .HasName("PK__Sentimen__2C83A9C26FF6E437");

                    b.ToTable("Sentiment1Month");
                });

            modelBuilder.Entity("PREDICTING_STOCK_MARKET_API.Models.Sentiment1Week", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("StockGeneralSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockGeneralSentiment");

                    b.Property<string>("StockLikeSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockLikeSentiment");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockName");

                    b.Property<string>("StockReplySentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockReplySentiment");

                    b.Property<string>("StockResultSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockResultSentiment");

                    b.Property<string>("StockRetweetSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockRetweetSentiment");

                    b.HasKey("StockId")
                        .HasName("PK__Sentimen__2C83A9C26FF65537");

                    b.ToTable("Sentiment1Week");
                });

            modelBuilder.Entity("PREDICTING_STOCK_MARKET_API.Models.Sentiment3Month", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("StockGeneralSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockGeneralSentiment");

                    b.Property<string>("StockLikeSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockLikeSentiment");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockName");

                    b.Property<string>("StockReplySentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockReplySentiment");

                    b.Property<string>("StockResultSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockResultSentiment");

                    b.Property<string>("StockRetweetSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockRetweetSentiment");

                    b.HasKey("StockId")
                        .HasName("PK__Sentimen__2C83A9C26FF6E455");

                    b.ToTable("Sentiment3Month");
                });

            modelBuilder.Entity("PREDICTING_STOCK_MARKET_API.Models.Sentiment6Month", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("StockGeneralSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockGeneralSentiment");

                    b.Property<string>("StockLikeSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockLikeSentiment");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockName");

                    b.Property<string>("StockReplySentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockReplySentiment");

                    b.Property<string>("StockResultSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockResultSentiment");

                    b.Property<string>("StockRetweetSentiment")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("StockRetweetSentiment");

                    b.HasKey("StockId")
                        .HasName("PK__Sentimen__2C83A9C26FF6E432");

                    b.ToTable("Sentiment6Month");
                });

            modelBuilder.Entity("PREDICTING_STOCK_MARKET_API.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StockPrice")
                        .HasColumnType("float");

                    b.Property<string>("StockShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PREDICTING_STOCK_MARKET_API.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PREDICTING_STOCK_MARKET_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PREDICTING_STOCK_MARKET_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PREDICTING_STOCK_MARKET_API.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PREDICTING_STOCK_MARKET_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PREDICTING_STOCK_MARKET_API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
